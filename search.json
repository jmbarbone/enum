[{"path":"https://jmbarbone.github.io/enum/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Mark Barbone. Author, copyright holder, maintainer.","code":""},{"path":"https://jmbarbone.github.io/enum/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbone J (2025). enum: Enum Classes. R package version 0.0.9000, https://jmbarbone.github.io/enum/.","code":"@Manual{,   title = {enum: Enum Classes},   author = {Jordan Mark Barbone},   year = {2025},   note = {R package version 0.0.9000},   url = {https://jmbarbone.github.io/enum/}, }"},{"path":[]},{"path":"https://jmbarbone.github.io/enum/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Enum Classes","text":"can install development version enum like :","code":"pak::pak(\"jmbarbone/enum\")"},{"path":"https://jmbarbone.github.io/enum/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Enum Classes","text":"enum() create set Enum values. can useful validating function arguments. Since enum() returns enum object can accept enum object can pass one enum another, safely, values compatible. enums type limited. can specify mixed typing long conform basic c(...) handling properties.","code":"library(enum) hex <- enum(letters[1:6], 0:9) hex #> <Enum> #>   a : a #>   b : b #>   c : c #>   d : d #>   e : e #>   f : f #>   0 : 0 #>   1 : 1 #>   2 : 2 #>   3 : 3 #>   4 : 4 #>   5 : 5 #>   6 : 6 #>   7 : 7 #>   8 : 8 #>   9 : 9 hex(c(1, 5, \"a\", 6, \"f\", 0)) # valid that inputs are part of enum set #> [1] \"1\" \"5\" \"a\" \"6\" \"f\" \"0\" try(hex(c(1, 5, \"a\", \"j\"))) # throws error when invalid input is given #> Error : 'j' is not a valid enum value Shapes <- enum(   triangle = 3,    square = 4,    pentagon = 5,    hexagon = 6 )  angles <- function(shape = Shapes) {   sides <- Shapes(shape) # validate input   (sides - 2) * 180 / sides }  angles(\"triangle\") #> [1] 60 angles(\"square\") #> [1] 90 try(angles(\"circle\")) # throws error when invalid input is given #> Error : 'circle' is not a valid enum value FunShapes <- enum(   circle = \"A round shape\",   square = \"A shape with four equal sides\",   triangle = \"A shape with three sides\",   rectangle = \"A shape with four sides and equal opposite sides\",   pentagon = \"A shape with five sides\",   hexagon = \"A shape with six sides\",   oval = \"An elongated circle\",   star = \"A shape with points radiating from a center\",   heart = \"A shape symbolizing love\" )  FunShapes(Shapes) #> [1] \"A shape with three sides\"      \"A shape with four equal sides\" #> [3] \"A shape with five sides\"       \"A shape with six sides\" # but not try(Shapes(FunShapes)) #> Error : 'circle' is not a valid enum value FormatOpts := Enum(   hook = function(x) trimws(x),   digits = 4L,   justify = \"right\" )  FormatOpts #> <Enum{FormatOpts}> #>   hook    : function (x) , trimws(x) #>   digits  : 4 #>   justify : right FormatOpts(FormatOpts) #> [[1]] #> function (x)  #> trimws(x) #> <environment: 0x63356eae7a98> #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] \"right\" # c() will combine to a common type ValueOptsVec := Enum(   numeric = 1.0,   integer = 1L,   character = \"one\",   logical = TRUE )  ValueOptsVec(ValueOptsVec) #> [1] \"1\"    \"1\"    \"one\"  \"TRUE\"  # specify as list() to preserve types ValueOptionsList := Enum(   numeric = list(1.0),   integer = list(1L),   character = list(\"one\"),   logical = list(TRUE) )  ValueOptionsList(ValueOptionsList) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 1 #>  #> [[3]] #> [1] \"one\" #>  #> [[4]] #> [1] TRUE"},{"path":"https://jmbarbone.github.io/enum/index.html","id":"errors","dir":"","previous_headings":"","what":"Errors","title":"Enum Classes","text":"Fore specific error handling, can name enum class Enum() variant:","code":"Colors := Enum(   Cyan = \"#00FFFF\",   Magenta = \"#FF00FF\",   Yellow = \"#FFFF00\" )  Colors(\"Magenta\") #> [1] \"#FF00FF\" try(Colors(\"Blue\")) #> Error : 'Blue' is not a valid Enum{Colors} value tryCatch(   Colors(\"Red\"),   `enum_error:Colors` = function(e) {     message(\"Caught an enum_error: <\", conditionMessage(e), \">\")   } ) #> Caught an enum_error: <'Red' is not a valid Enum{Colors} value>"},{"path":"https://jmbarbone.github.io/enum/reference/colon-equals.html","id":null,"dir":"Reference","previous_headings":"","what":"Walrus operator — :=","title":"Walrus operator — :=","text":"Walrus operator","code":""},{"path":"https://jmbarbone.github.io/enum/reference/colon-equals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Walrus operator — :=","text":"","code":"`:=`(sym, val)"},{"path":"https://jmbarbone.github.io/enum/reference/colon-equals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Walrus operator — :=","text":"sym symbol assign val value assign","code":""},{"path":"https://jmbarbone.github.io/enum/reference/colon-equals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Walrus operator — :=","text":"assigned value","code":""},{"path":"https://jmbarbone.github.io/enum/reference/colon-equals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Walrus operator — :=","text":"","code":"Letters := Enum(letters)"},{"path":"https://jmbarbone.github.io/enum/reference/enum-package.html","id":null,"dir":"Reference","previous_headings":"","what":"enum: Enum Classes — enum-package","title":"enum: Enum Classes — enum-package","text":"Creates enum classes. Enum classes controls sets allow users specify specific choices options categories. Enums present many programming languages offer support using factors.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/enum/reference/enum-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"enum: Enum Classes — enum-package","text":"Maintainer: Jordan Mark Barbone jmbarbone@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://jmbarbone.github.io/enum/reference/enum.html","id":null,"dir":"Reference","previous_headings":"","what":"Enums — enum","title":"Enums — enum","text":"Create enum sets","code":""},{"path":"https://jmbarbone.github.io/enum/reference/enum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enums — enum","text":"","code":"Enum(name, ...)  enum(values, ...)"},{"path":"https://jmbarbone.github.io/enum/reference/enum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enums — enum","text":"name name `enum` values, ... Set values `enum`.  can names unnamed.","code":""},{"path":"https://jmbarbone.github.io/enum/reference/enum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enums — enum","text":"`enum` object, function S3 methods","code":""},{"path":"https://jmbarbone.github.io/enum/reference/enum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enums — enum","text":"`enum`s sets named unnamed values.  `enum` object built-features retrieve values name, provide list values,","code":""},{"path":"https://jmbarbone.github.io/enum/reference/enum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enums — enum","text":"","code":"Letters <- enum(letters) Letters()        # when missing, returns list of everything #> $a #> [1] \"a\" #>  #> $b #> [1] \"b\" #>  #> $c #> [1] \"c\" #>  #> $d #> [1] \"d\" #>  #> $e #> [1] \"e\" #>  #> $f #> [1] \"f\" #>  #> $g #> [1] \"g\" #>  #> $h #> [1] \"h\" #>  #> $i #> [1] \"i\" #>  #> $j #> [1] \"j\" #>  #> $k #> [1] \"k\" #>  #> $l #> [1] \"l\" #>  #> $m #> [1] \"m\" #>  #> $n #> [1] \"n\" #>  #> $o #> [1] \"o\" #>  #> $p #> [1] \"p\" #>  #> $q #> [1] \"q\" #>  #> $r #> [1] \"r\" #>  #> $s #> [1] \"s\" #>  #> $t #> [1] \"t\" #>  #> $u #> [1] \"u\" #>  #> $v #> [1] \"v\" #>  #> $w #> [1] \"w\" #>  #> $x #> [1] \"x\" #>  #> $y #> [1] \"y\" #>  #> $z #> [1] \"z\" #>  Letters(Letters) # pass the enum itself to retrieve just the values #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"  # value, ... are combined: Continents <- enum(   \"Africa\",   \"Antarctica\",   \"Asia\",   \"Europe\",   \"North America\",   \"Oceania\",   \"South America\" )  Continents() #> $Africa #> [1] \"Africa\" #>  #> $Antarctica #> [1] \"Antarctica\" #>  #> $Asia #> [1] \"Asia\" #>  #> $Europe #> [1] \"Europe\" #>  #> $`North America` #> [1] \"North America\" #>  #> $Oceania #> [1] \"Oceania\" #>  #> $`South America` #> [1] \"South America\" #>  Continents@Asia #> [1] \"Asia\" Continents(\"Asia\") #> [1] \"Asia\" Continents(c(\"Asia\", \"Europe\")) #> [1] \"Asia\"   \"Europe\" try(Continents(\"Atlantis\")) #> Error : 'Atlantis' is not a valid enum value  Colors := Enum(c(   Red = \"#FF0000\",   Green = \"#00FF00\",   Blue = \"#0000FF\",   Yellow = \"#FFFF00\",   Black = \"#000000\",   White = \"#FFFFFF\",   Purple = \"#800080\",   Orange = \"#FFA500\",   Pink = \"#FFC0CB\",   Brown = \"#A52A2A\",   Gray = \"#808080\",   Cyan = \"#00FFFF\",   Magenta = \"#FF00FF\" ))  Colors@Red #> [1] \"#FF0000\" Colors(c(\"Red\", \"Blue\")) #> [1] \"#FF0000\" \"#0000FF\" Colors(\"Green\") #> [1] \"#00FF00\" try(Colors(\"Turquoise\"))  # This will raise an error #> Error : 'Turquoise' is not a valid Enum{Colors} value  Shapes <- enum(c(   Circle = \"A round shape\",   Square = \"A shape with four equal sides\",   Triangle = \"A shape with three sides\",   Rectangle = \"A shape with four sides and equal opposite sides\",   Oval = \"An elongated circle\",   Star = \"A shape with points radiating from a center\",   Heart = \"A shape symbolizing love\" ))  Shapes@Circle #> [1] \"A round shape\" Shapes(c(\"Circle\", \"Square\")) #> [1] \"A round shape\"                 \"A shape with four equal sides\" Colors(Colors) #>  [1] \"#FF0000\" \"#00FF00\" \"#0000FF\" \"#FFFF00\" \"#000000\" \"#FFFFFF\" \"#800080\" #>  [8] \"#FFA500\" \"#FFC0CB\" \"#A52A2A\" \"#808080\" \"#00FFFF\" \"#FF00FF\" print((function(x = Colors) Colors(x))()) #>  [1] \"#FF0000\" \"#00FF00\" \"#0000FF\" \"#FFFF00\" \"#000000\" \"#FFFFFF\" \"#800080\" #>  [8] \"#FFA500\" \"#FFC0CB\" \"#A52A2A\" \"#808080\" \"#00FFFF\" \"#FF00FF\" print((function(x = Colors) Colors(x))(\"Red\")) #> [1] \"#FF0000\""}]
